
DUAL CASES

R_0 | 0(0) |    1(1)    1(3)    | Cancel 0
R_1 | 1(1) |    0(0)    1(3)    | Cancel 1
R_2 | 0(0) |    0(2)    1(1)    | Cancel 0
R_3 | 1(1) |    1(3)    0(0)    | Cancel 1
{0,1,3} -> Commit ONE, but should be ZERO (too weak Primary0)
0(0)    1(1)    1(3)    -> should_be ZERO



R_0 | 0(0) |    1(1)    1(2)    | Cancel 0 
R_1 | 1(1) |    0(0)    1(2)    | Cancel 1
R_2 | 1(1) |    1(2)    0(0)    | Cancel 1
R_3 | 1(1) |    1(3)    0(0)    | Cancel 1
{0,1,2} -> Commit ZERO, but should be ONE (too strong Primary0)
0(0)    1(1)    1(2)    -> should_be ONE

Maybe solution is:
- Primary zero will never commit to one, but to commit to itself, it will require minimum support (eventually), at least one more non-faulty
- Others may not have such faith in zero, so they will commit in one.
- It means that perhaps, one would need to wait some commits, to then commit itself, standing in hang status

=======
hang option: 0(0)    1(1)    1(3)    -> should return -3 (undecidable)

with HANG option:

R_0 | 0(0) |    1(1)    1(3)    | Cancel 0
R_1 | 1(1) |    0(0)    1(3)    | Cancel 1
R_2 | -2(-2) |  -2(-2)  -2(-2)  | Cancel -2
R_3 | 1(1) |    1(3)    0(0)    | Cancel 1

This fully stops consensus. Only available option is {0,1,3}, and it cannot decide alone. 
In this case, system will ChangeView.



